1、递归需要满足三个条件，即只要同时满足一下三个条件，就可以用递归来解决问题

（1）、一个问题的解可以分解为几个子问题的解
（2）、这个问题与分解后的子问题，处理数据规模不同，求解思路完全一样
（3）、存在递归终止条件

2、如何编写递归代码
编写递归代码的关键：就是写出递推公式，找到终止条件。剩下的就是将递推公式转换成代码即可

例如：跳台阶问题：现在有N阶台阶，一次能跳1阶或两阶，问跳上n阶台阶有多少种走法？
第一步走1阶后，剩下n-1阶的走法，加上先走2阶后，剩下n-2阶的走法。
所以递推公式为：f(n) = f(n-1) + f(n-2);
终止条件为：f(1) = 1,f(2) = 2

总结：写递归代码的关键就是找到将大问题分解为小问题的规律，并且基于此规律写出递推公式，然后在找到终止条件，最后将递推公式和终止条件翻译成代码即可。

3、写递归代码要注意的问题

（1）、递归代码要警惕堆栈溢出。
我们可以通过限制递归调用的最大深度来，避免堆栈溢出。
（2）、递归代码要避免重复计算。
为了避免重复计算。我们通过一个数据结构（如散列表）保存已经计算过的f(k)，当递归调用到f(k)时，先检查先是否已经求解过，如果已经求解过，直接从散列中取值。
这样就避免了重复计算。

4、怎样将递归代码改写成非递归代码？
理论上，所有递归代码都可以通过循环迭代的方式实现。
递归本身是使用栈来实现的。只不过递归使用的栈是系统或虚拟机提供的。而循环迭代本质上也是栈实现的。这个栈是我们在内存堆上创建的栈，手动模拟入栈出栈过程。
其本质没有变化。

5、我们平时调试代码喜欢使用 IDE 的单步跟踪功能，像规模比较大、递归层次比较深的递归代码，几乎无法使用这种调试方式，
而对于递归代码，你有什么好的调试方式呢？

调试递归：
1、打印日志发现，递归值
2、结合条件断点进行调试。
